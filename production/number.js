// 任务1 校验十进制整数的正则
// step1 十进制数的特点,只有0-9 的数值，两位数以上不能以0开头
// step2 解析产生式 见md

// 注释：根据产生式,先写出个位数非终端符,再补充多位数非终端符，最后针对数字非终端进行多次匹配，在开头增加减号，用于匹配负整数
// 注释1: []代表区间 {}代表匹配次数
// 注释: - 号需要\转义
const reg = /^[\-]([0-9]|[1-9][0-9]{1,})$/g
console.log('number:',reg.test('-1'));


// 任务2 校验带小数点的正则
// step1 js语言中小数的特点，就是以单点开头的也被视作合法，其他和数学中的是一样的,例如.5 也被视为合法
// step2 解析产生式 见md
// 注释1: 用正则解析相关文法，当产生式太过于复杂的时候，这个正则就会变得很长，可读性很差，这里采用模版字符串的语法进行分组
// 碰到换行符就将该分组加上括号，最后产生正则解析
// 注释2：()在正则中代表分组 ?<name> 在前代表给分组取名
const regStr = `
[0-9]|[1-9][0-9]*
\\.[0-9]*
[0-9]|[1-9][0-9]*\\.
[0-9]|[1-9][0,9]*\\.[0-9]*
`.split('\n').map(item => {
  return '(' + item +')'
}).join('|')
const reg1 = new RegExp(regStr)
console.log('decimal:',reg1.test('.1'));